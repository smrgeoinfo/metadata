{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://example.org/schema/project/raid0.5",
    "type": "object",
    "title": "ProjectDescriptionRecord RAID 0.5",
    "additionalProperties": true,
    "description": "This is a data object that is a digital representation of a Project. A project is a continuant in the view of this model. We adopt the definition from CitizenScience.org 'A Project is an organized effort carefully designed to achieve a particular goal.'(https://core.citizenscience.org/docs/project/). This implementation uses schema.org entities and properties to implement the RAID0.5 model. In order to validate with validator.schema.org, have to declare @types to include {ResearchProject, MedicalStudy, Event, Action, CreativeWork}. Can't validate multiple types with JSON schema, so root @type property in the 'about' section is not in the schema; this allows including properties relevant to projects but scoped more narrowly in schema.org domainIncludes. 'status','instrument','result', and 'authorized_by' are extensions of the RAID model. 'funding' is represented as an explicit property instead as a 'relatedObject' (relatedLink in schema.org).",
    "properties": {
        "@context": {"const": "https://schema.org/"},
        "@type": {"const": "DigitalDocument"},
        "@id": {
            "type": "string",
            "description": "this is a URI that identifies this project description record (not the project). The project description is in the about key.  "
        },
        "identifierRegistrationAgency": {
            "description": "The Registration Agency that minted the RAiD.",
            "$ref": "#/definitions/AgentOrganization"
        },
        "identifierOwner": {
            "description": "The legal entity responsible for the RAiD; the ‘Owner’ of a RAiD. Analogous to a DataCite ‘Member’, has a legal agreement with the Registration Agency. Owners may or may not have a ROR; if they do not, a local business / company number can be used as an identifier.",
            "$ref": "#/definitions/AgentOrganization"
        },
        "identifierServicePoint": {
            "description": "The Service Point that requested the RAiD. Analogous to a DataCite ‘Repository’. ‘Owners’ can have multiple Service Points, and SPs do not need to be legal entities. Service Points are not (necessarily) legal entities and may not have RORs.",
            "$ref": "#/definitions/AgentOrganization"
        },
        "sdDatePublished": {
            "type": "string",
            "description": "date (YYYY-MM-DD) or DateTime (YYYY-MM-DDTHH:MM) of most recent update to this metadata.",
            "anyOf": [
                {"format": "date"},
                {"format": "datetime"}
            ]
        },
        "about": {
            "type": "object",
            "description": "this is the part of the metadata record that actually describes the project",
            "properties": {
                "@id": {
                    "type": "string",
                    "description": "this is a URI that identifies the project. In RAID implementation, this will be the RAID identifier as an HTTP URI. When the JSON-LD is converted to triples, this will be the subject of triples whose predicate is one of the keys that are siblings of the @id key."
                },
                "startDate": {
                    "type": "string",
                    "description": "if the start date is in the future, status must be 'planned', and it’s a planned start date",
                    "anyOf": [
                        {"format": "year"},
                        {"format": "yearmonth"},
                        {"format": "date"},
                        {"format": "datetime"}
                    ]
                },
                "endDate": {
                    "type": "string",
                    "description": "if the end date is in the future, it is a planned end date, if its in the past, the project is complete",
                    "anyOf": [
                        {"format": "year"},
                        {"format": "yearmonth"},
                        {"format": "date"},
                        {"format": "datetime"}
                    ]
                },
                "name": {
                    "description": "a human intelligible string used to identify a thing, i.e. the name to use for the thing; should be unique in the scope of its applicable context. Schema.org property [RAID-primary title]",
                    "$ref": "#/definitions/AnnotatedText"
                },
                "description": {
                    "description": "free text description of the project, and any related information. Include as much detail as will be useful for users to understand the project. Include description of workflow/procedure for achieving project goals. Explain the purpose for the project here. Should include information about the plannedOutcome and motivation for the project. Use type property to scope description about different aspects; RAID suggests {Primary, Alternative, Brief, Significance Statement, Methods, Objectives, Other, 'Note'} DataCite 4.4 suggests {Abstract,Methods,SeriesInformation,TableOfContents,TechnicalInfo,Other}",
                    "$ref": "#/definitions/AnnotatedText"
                },
                "participant": {
                    "description": "an array of Person Role objects to provide information about People in various roles with respect to the project. Roles include leader, principle investigator, sponsor, host, pointOf contact, team member, project lead, research contributor, associated party, collaborator. Role vocabulary should be a FAIR vocabulary.",
                    "type": "array",
                    "items": {"$ref": "#/definitions/PersonRole"}
                },
                "affiliation": {
                    "description": "an array of Organization Role objects to provide information about Organizations in various roles with respect to the project. Roles include Lead Research Organisation, Other Research Organisation, Partner Organisation , Contractor , Other Organisation. Role vocabulary should be a FAIR vocabulary. This is 'Organisation' in RAID0.5 model} ..",
                    "type": "array",
                    "items": {"$ref": "#/definitions/OrganizationRole"}
                },
                "relatedLink": {
                    "type": "array",
                    "description": "use for RAID RelatedObject and RelatedRAID. Links to input or resource used by a project or activity, output or product created by a project or activity, internal process documentation used within a project or activity, or to related projects, e.g. parents, sub-projects, partner projects, dependencies, etc. RAID includes funding as a relatedObject, is separate property in this implementation.",
                    "items": {"$ref": "#/definitions/ResourceLink"}
                },
                "identifier": {
                    "description": "alternate identifiers for the project described by this record.  Schema.org property",
                    "type": "array",
                    "items": {"$ref": "#/definitions/IdentifierObject"}
                },
                "keywords": {
                    "description": "categorization of project to support discovery.",
                    "items": {
                        "oneOf": [
                            {"type": "string"},
                            {"$ref": "#/definitions/ScopedName"}
                        ]
                    },
                    "type": "array"
                },
                "ethicsPolicy": {
                    "type": "array",
                    "description": "a list of policies, recommendations, best practices (etc.) that have been followed in the project execution. If any special protocols were followed, they should be documented here. include TraditionalKnowledgeLabelScheme ",
                    "items": {
                        "type": "object",
                        "properties": {
                            "@type": {"const": "CreativeWork"},
                            "name": {"type": "string"},
                            "description": {"type": "string"},
                            "url": {"type": "string"}
                        }
                    }
                },
                "location": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "description": "use schema.org model. Probably good to include a GeoSPARQL or GeoJSON serialization as well.",
                        "properties": {
                            "@type": {"const": "Place"},
                            "name": {
                                "type": "string",
                                "description": "name of the place [make string or scopedName?]"
                            },
                            "geo": {
                                "type": "array",
                                "description": "location can be specified by one or more point location or  bounding box. Leave polygon out for now to simplify.",
                                "items": {
                                    "oneOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@type": {"const": "GeoCoordinates"},
                                                "elevation": {
                                                    "type": "string",
                                                    "description": "string that specifies elevation, units of measure, and the vertical reference datum, e.g. mean sea level, ground surface..."
                                                },
                                                "latitude": {"type": "number"},
                                                "longitude": {"type": "number"}
                                            }
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "@type": {"const": "GeoShape"},
                                                "box": {
                                                    "type": "string",
                                                    "description": "A rectangle on the earth surface specified by point locations of the southwest corner and northeast corner in latitude-longitude coordinates. Point locations are tuples of {latitude east-longitude} (y x). Use commas to separate latitude and longitude. The two corner coordinate points are separated by a space. 'East longitude' means positive longitude values are east of the prime (Greenwich) meridian. See https://github.com/ESIPFed/science-on-schema.org/blob/master/guides/Dataset.md#bounding-boxes for details"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "uniqueItems": true
                },
                "status": {
                    "type": "string",
                    "description": "The activity status of the project. should be an enumeration, e.g. {planned, in progress, complete, abandoned, on hold}... Schema.org docs specify domainIncludes MedicalCondition, MedicalProcedure, or MedicalStudy so MedicalStudy is added as a @type for this object."
                },
                "instrument": {
                    "type": "array",
                    "description": "any particular equiment used for the project, e.g. a Ship if the project is a cruise, or particular instruments used to make measurements. Scoped name allows label and identifier (if available). Schema.org property, defined as 'The object that helped the agent perform the action.', with domainIncludes Action. ",
                    "items": {
                        "oneOf": [
                            {"type": "string"},
                            {"$ref": "#/definitions/ScopedName"}
                        ]
                    }
                },
                "funding": {
                    "type": "array",
                    "description": "link to a Grant object, that identifies the funding agent. If there is no specific grant name or ID, the Grant object just specifies teh name of the funding organization. RAID represents as a project input, using RelatedObject. Make explicit here.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "@type": {
                                "const": "Grant",
                                "description": "schema.org funding expects a Grant object as a value. This allow inclusion of an identifier for a specific grant or contract"
                            },
                            "name": {"type": "string"},
                            "description": {"type": "string"},
                            "identifier": {
                                "type": "array",
                                "items": {"$ref": "#/definitions/IdentifierObject"}
                            },
                            "funder": {
                                "oneOf": [
                                    {"$ref": "#/definitions/AgentPerson"},
                                    {"$ref": "#/definitions/AgentOrganization"}
                                ]
                            }
                        }
                    }
                },
                "result": {
                    "type": "array",
                    "description": "The outcome(s) achieved or delivered by a project.  Domain of schema:result is schema:Action, range is schema:Thing.  Use this to link to project products.",
                    "items": {
                        "oneOf": [
                            {"type": "string"},
                            {"$ref": "#/definitions/ResourceLink"}
                        ]
                    }
                },
                "authorized_by": {
                    "description": "a list of permits or other formal permission documents under which the project is working. Use to cite legal documents authorizing project activities.",
                    "items": {"type": "string"},
                    "type": "array"
                }
            },
            "required": [
                "@id",
                "name"
            ]
        }
    },
    "required": [
        "identifierRegistrationAgency",
        "about"
    ],
    "definitions": {
        "PersonRole": {
            "title": "Person in Role",
            "type": "object",
            "additionalProperties": true,
            "description": "object to represent a person who plays a role relative the project.",
            "properties": {
                "@type": {"const": "Role"},
                "roleName": {
                    "type": "array",
                    "items": [
                        {
                            "description": "a string or URI that specifies the relationship of a person or organization to the project. Use for contributor Position and contributor role in RAID model.",
                            "oneOf": [
                                {"type": "string"},
                                {"$ref": "#/definitions/ScopedName"}
                            ]
                        }
                    ]
                },
                "startDate": {
                    "type": "string",
                    "description": "start date for participants involvement in the project in this role or position"
                },
                "endDate": {"type": "string"},
                "participant": {"$ref": "#/definitions/AgentPerson"}
            }
        },
        "OrganizationRole": {
            "title": "Organization in Role",
            "type": "object",
            "additionalProperties": true,
            "description": "object to represent an organization that plays a role relative the project.",
            "properties": {
                "@type": {"const": "Role"},
                "roleName": {
                    "type": "array",
                    "items": [
                        {
                            "description": "a string or URI that specifies the relationship of a person or organization to the project. Use for contributor Position and contributor role in RAID model.",
                            "oneOf": [
                                {"type": "string"},
                                {"$ref": "#/definitions/ScopedName"}
                            ]
                        }
                    ]
                },
                "startDate": {
                    "type": "string",
                    "description": "start date for participants involvement in the project in this role or position"
                },
                "endDate": {"type": "string"},
                "participant": {"$ref": "#/definitions/AgentOrganization"}
            }
        },
        "AgentPerson": {
            "title": "Agent",
            "type": "object",
            "additionalProperties": true,
            "description": "object to represent a person who plays a role relative the project.",
            "properties": {
                "@type": {"const": "Person"},
                "@id": {
                    "type": "string",
                    "description": "identifier for the person, recommend ORCID"
                },
                "name": {
                    "description": "string, name of a person. Format {firstName MI lastName}.",
                    "type": "string"
                },
                "affiliation": {
                    "description": "Name of an organization that employes or sponsors a person for the role they play relative to sample collection or curation.",
                    "$ref": "#/definitions/AgentOrganization"
                },
                "contact_information": {
                    "description": "e-mail address, telephone number, mailing address, or web site through which an agent can be contacted. Something that should be stable and reliable.",
                    "type": "string"
                },
                "identifier": {
                    "description": "other identifiers for the person",
                    "type": "array",
                    "items": {"$ref": "#/definitions/IdentifierObject"}
                }
            }
        },
        "AgentOrganization": {
            "title": "Agent",
            "type": "object",
            "additionalProperties": true,
            "description": "object to represent a person who plays a role relative the project.",
            "properties": {
                "@type": {"const": "Organization"},
                "@id": {
                    "type": "string",
                    "description": "identifier for the organization, recommend ROR"
                },
                "name": {
                    "description": "string, name of a person. Format {firstName MI lastName}.",
                    "type": "string"
                },
                "contact_information": {
                    "description": "e-mail address, telephone number, mailing address, or web site through which an agent can be contacted. Something that should be stable and reliable.",
                    "type": "string"
                },
                "identifier": {
                    "description": "alternate identifier(s) for the organization. Expectation is that it is a URI that is resolvable to some useful represenation.",
                    "type": "array",
                    "items": {"$ref": "#/definitions/IdentifierObject"}
                }
            }
        },
        "GeoLocationPoint": {
            "title": "GeospatialPointLocation",
            "type": "object",
            "additionalProperties": true,
            "description": "A physical location in decimal degrees using EPSG:4326. Elevation is is expressed in meters relative to the WGS84 ellipsoid. Could be sample point location, or the centroid of a sampling area",
            "properties": {
                "elevation": {
                    "description": "Should be a number and Unit of measure, and the datum. e.g. 401 m above mean sea level.",
                    "type": "string"
                },
                "pointlatitude": {
                    "description": "angular coordinate measured positive north from the equator.",
                    "type": "number"
                },
                "pointlongitude": {
                    "description": "angular coordinate measured positive eastward from the prime meridian.",
                    "type": "number"
                }
            }
        },
        "ScopedName": {
            "title": "ScopedName",
            "type": "object",
            "description": "Use schema.org DefinedTerm pattern (see https://github.com/ESIPFed/science-on-schema.org/blob/master/guides/Dataset.md#keywords) to associate keyword string with a scheme (DefinedTermSet) name,and optional scheme URI and value URI. The scoped name keywords can be used to categorize the sample using a formal vocabulary. ",
            "properties": {
                "@type": {"const": "DefinedTerm"},
                "name": {
                    "description": "string label for the keyword concept.",
                    "type": "string"
                },
                "identifier": {
                    "description": "an identifier for the keyword concept",
                    "type": "string"
                },
                "termCode": {
                    "type": "string",
                    "description": "an abbreviation or short text string used to identify the keyword in data"
                },
                "inDefinedTermSet": {
                    "type": "object",
                    "properties": {
                        "@type": {"const": "DefinedTermSet"},
                        "name": {
                            "description": "string label for the concept scheme or vocabulary within which the keyword concept is defined. The scheme name can be used to scope keyword to particular categories, e.g. -CGI rock classification-, -GCMD keywords-, -Getty AAT- ",
                            "type": "string"
                        },
                        "identifier": {
                            "description": "Identifier for the concept scheme or vocabulary within which the keyword concept is defined.",
                            "type": "string"
                        }
                    }
                }
            }
        },
        "AnnotatedText": {
            "title": "Localized string",
            "description": "object for a string with a language property. use JSON-LD defined language property, add language scheme propert. There is no schema.org Class that has the required properties, so this value is not typed",
            "properties": {
                "inLanguage": {
                    "type": "string",
                    "description": "use ISO639-1 two letter language code"
                },
                "textValue": {"type": "string"},
                "additionalType": {"type": "string"},
                "startDate": {
                    "type": "string",
                    "description": "start of time interval in which this text is valid"
                },
                "endDate": {"type": "string"}
            }
        },
        "IdentifierObject": {
            "title": "Identifier object",
            "type": "object",
            "description": "Use schema.org PropertyValue object to represent an identifier; use for identifiers that are not URIs, and for alternate identifiers. Preferred identifier should be in @id; Use Property value pattern (https://github.com/ESIPFed/science-on-schema.org/blob/master/guides/Dataset.md#identifier). ",
            "properties": {
                "@id": {
                    "type": "string",
                    "description": "the identifier string value"
                },
                "type": {"const": "PropertyValue"},
                "propertyID": {
                    "type": "string",
                    "description": "Identifier scheme URI. identifier for the kind of identifier provided here, e.g. ISSN, ark, ISBN"
                },
                "value": {
                    "type": "string",
                    "description": "the string representation of the identifier"
                },
                "url": {
                    "type": "string",
                    "description": "if the identifier value is not resolvable, provide a url that will get a representation of the resource associated with the identifier, which is likely to be the containing metadata record, but might be a landing page"
                },
                "description": {
                    "type": "string",
                    "description": "text explanation of the context for this identifier"
                }
            },
            "required": [
                "@id",
                "type"
            ]
        },
        "ResourceLink": {
            "title": "Relation to another resource",
            "type": "object",
            "description": "semantic link to a related resource.",
            "properties": {
                "@type": {"const": "LinkRole"},
                "name": {
                    "description": "a short human intelligible string to label the link.",
                    "type": "string"
                },
                "description": {
                    "description": "Free text description of related resource, explanation of link.",
                    "type": "string"
                },
                "linkRelationship": {
                    "description": "term to identify realationship between the project and the relation target. Should be controlled vocabulary (ScopedName).",
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {"type": "string"},
                            {"$ref": "#/definitions/ScopedName"}
                        ]
                    }
                },
                "inLanguage": {"type": "string"},
                "target": {
                    "description": "identifier for the target resource in the relationship. Start with string, should be Identifier object.",
                    "type": "object",
                    "properties": {
                        "@type": {"const": "EntryPoint"},
                        "@id": {"type": "string"},
                        "url": {"type": "string"},
                        "name": {"type": "string"},
                        "encodingType": {
                            "type": "string",
                            "description": "The format of the item that is the target of the url"
                        },
                        "contentType": {"type": "string"}
                    }
                }
            }
        }
    }
}